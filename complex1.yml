---
# Red Hat Insights has recommended one or more actions for you, a system administrator, to review and if you
# deem appropriate, deploy on your systems running Red Hat software. Based on the analysis, we have automatically
# generated an Ansible Playbook for you. Please review and test the recommended actions and the Playbook as
# they may contain configuration changes, updates, reboots and/or other changes to your systems. Red Hat is not
# responsible for any adverse outcomes related to these recommendations or Playbooks.
#
# complex_remediation
# https://cloud.redhat.com/insights/remediations/c6c9a9a8-307a-4fdc-9fc3-a8d1a8ac7678
# Generated by Red Hat Insights on Mon, 20 Apr 2020 01:45:16 GMT
# Created by fran.robles@expertice.com.ar

- name: run insights to obtain latest diagnosis info
  hosts: "db.expertice.local"
  become: True
  tasks:
    - name: obtain diagnosis info
      shell: 'insights-client --diagnosis c6c9a9a8-307a-4fdc-9fc3-a8d1a8ac7678'
      register: insights_result
      changed_when: false
      check_mode: false
    - name: register insights report as fact for use by other plays
      set_fact: insights_report={{ insights_result.stdout }}

# CVE-2017-1000251: &quot;Blueborne&quot; kernel denial of service
# Identifier: (advisor:CVE_2017_1000251_kernel_blueborne|KERNEL_CVE_2017_1000251_POSSIBLE_DOS,fix)
# Version: e20ad6ba85563766bb4c5ce94bef2546241fab58
- name: Update system to the latest kernel and reboot
  hosts: "db.expertice.local"
  become: true
  vars:
    # determine if we need to update the 'kernel' package or 'kernel-rt' package
    kernel_pkg: "{{'kernel-rt' if 'rt' in ansible_kernel else 'kernel'}}"

  tasks:
    - name: Clear and update repos
      command: yum clean all
      register: yum_clear
      changed_when: '"Cleaning up everything" in yum_clear.stdout'

    - name: Update kernel
      yum:
        name: "{{ kernel_pkg }}"
        state: latest
      register: yum

    - when: yum is changed
      name: set reboot fact
      set_fact:
        insights_needs_reboot: True

    - when: not yum is changed
      # The latest kernel is already installed so boot from it.  Sort the installed kernels
      # by buildtime and select the one with the most recent build time
      block:
        - name: get latest installed {{ kernel_pkg }} package version
          command: rpm -q {{ kernel_pkg }} --queryformat="%{buildtime}\t%{version}-%{release}.%{arch}\n" | sort -nr | head -1 | cut -f2
          register: latest_kernel
          check_mode: no

        - name: get configured default kernel
          command: /sbin/grubby --default-kernel
          register: default_kernel
          check_mode: no

        - when: default_kernel.stdout.split('-', 1)[1] != latest_kernel.stdout
          name: set the default kernel to the latest installed
          command: /sbin/grubby --set-default /boot/vmlinuz-{{ latest_kernel.stdout }}
          register: grub_change
          check_mode: no

        - when: grub_change is changed
          name: set reboot fact
          set_fact:
            insights_needs_reboot: True


# CVE-2017-1000253: kernel privilege escalation via SUID PIE binaries
# Identifier: (advisor:CVE_2017_1000253_loadelf|KERNEL_CVE_2017_1000253_VULNERABLE,kernel_update)
# Version: e20ad6ba85563766bb4c5ce94bef2546241fab58
- name: Update system to the latest kernel and reboot
  hosts: "db.expertice.local"
  become: true
  vars:
    # determine if we need to update the 'kernel' package or 'kernel-rt' package
    kernel_pkg: "{{'kernel-rt' if 'rt' in ansible_kernel else 'kernel'}}"

  tasks:
    - name: Clear and update repos
      command: yum clean all
      register: yum_clear
      changed_when: '"Cleaning up everything" in yum_clear.stdout'

    - name: Update kernel
      yum:
        name: "{{ kernel_pkg }}"
        state: latest
      register: yum

    - when: yum is changed
      name: set reboot fact
      set_fact:
        insights_needs_reboot: True

    - when: not yum is changed
      # The latest kernel is already installed so boot from it.  Sort the installed kernels
      # by buildtime and select the one with the most recent build time
      block:
        - name: get latest installed {{ kernel_pkg }} package version
          command: rpm -q {{ kernel_pkg }} --queryformat="%{buildtime}\t%{version}-%{release}.%{arch}\n" | sort -nr | head -1 | cut -f2
          register: latest_kernel
          check_mode: no

        - name: get configured default kernel
          command: /sbin/grubby --default-kernel
          register: default_kernel
          check_mode: no

        - when: default_kernel.stdout.split('-', 1)[1] != latest_kernel.stdout
          name: set the default kernel to the latest installed
          command: /sbin/grubby --set-default /boot/vmlinuz-{{ latest_kernel.stdout }}
          register: grub_change
          check_mode: no

        - when: grub_change is changed
          name: set reboot fact
          set_fact:
            insights_needs_reboot: True


# CVE-2017-1000364, CVE-2017-1000366: kernel, glibc privilege escalation
# Identifier: (advisor:CVE_2017_1000366_glibc|CVE_2017_1000364_KERNEL_CVE_2017_1000366_GLIBC_EXPLOITABLE,update)
# Version: 5f7679cc1dd2d29dab6ef4bf4b980aadf4f86ebb
- name: Update system to the latest kernel and glibc and reboot
  hosts: "db.expertice.local"
  become: true
  vars:
    # determine if we need to update the 'kernel' package or 'kernel-rt' package
    kernel_pkg: "{{'kernel-rt' if 'rt' in ansible_kernel else 'kernel'}}"

  tasks:
    - name: Update kernel
      yum:
        name: "{{kernel_pkg}}"
        state: latest
      register: kernel

    - name: Update glibc
      yum:
        name: glibc
        state: latest
      register: glibc

    - when: kernel|changed or glibc|changed
      name: set reboot fact
      set_fact:
        insights_needs_reboot: True

    - when: not kernel|changed
      # The latest kernel is already installed so boot from it.  Sort the installed kernels
      # by buildtime and select the one with the most recent build time
      block:
        - name: get latest installed "{{kernel_pkg}}"
          shell: rpm -q {{kernel_pkg}} --queryformat="%{buildtime}\t%{version}-%{release}.%{arch}\n" | sort -nr | head -1 | cut -f2
          register: latest_kernel
          check_mode: no
          changed_when: no

        - name: get configured default kernel
          command: /sbin/grubby --default-kernel
          register: default_kernel
          check_mode: no

        - when: default_kernel.stdout.split('-', 1)[1] != latest_kernel.stdout
          name: set the default kernel to the latest installed
          command: /sbin/grubby --set-default /boot/vmlinuz-{{latest_kernel.stdout}}
          register: grub
          check_mode: no

        - when: grub|changed or glibc|changed
          name: set reboot fact
          set_fact:
            insights_needs_reboot: True


# CVE-2017-1000368: sudo privilege escalation due to incomplete bugfix
# Identifier: (advisor:CVE_2017_1000368_sudo|CVE_2017_1000368_SUDO_2,fix)
# Version: 652704316a2896e4c43cd6f8d69243de45465e20
- name: Update sudo
  hosts: "db.expertice.local"
  become: yes

  tasks:
    - name: Update sudo to latest available
      yum:
        name: sudo
        state: latest


# CVE-2017-14491: dnsmasq code execution
# Identifier: (advisor:CVE_2017_14491_dnsmasq|CVE_2017_14491_WARN,fix)
# Version: 5f7679cc1dd2d29dab6ef4bf4b980aadf4f86ebb
- name: Update dnsmasq package and restart related service(s)
  hosts: "db.expertice.local"
  become: yes
  vars:
    pydata_err: "{{insights_report.details['CVE_2017_14491_dnsmasq|CVE_2017_14491_ERROR'] | default('')}}"
    pydata_wrn: "{{insights_report.details['CVE_2017_14491_dnsmasq|CVE_2017_14491_WARN'] | default('')}}"

  tasks:

    - when: pydata_err != ""
      set_fact:
        pydata: "{{pydata_err}}"

    - when: pydata_wrn != ""
      set_fact:
        pydata: "{{pydata_wrn}}"


    - when: pydata is defined
      block:
        - yum:
            name: "{{pydata.vulnerable_version['PACKAGE_NAMES']}}"
            state: latest

        - when: pydata.libvirtd_running
          service:
            name: libvirtd
            state: restarted
            enabled: "{{pydata.libvirtd_enabled}}"

        - when: pydata.dnsmasq_running
          service:
            name: dnsmasq
            state: restarted
            enabled: "{{pydata.dnsmasq_enabled}}"


# CVE-2017-2636: kernel privilege escalation
# Identifier: (advisor:CVE_2017_2636_kernel|KERNEL_CVE_2017_2636,mitigate)
# Version: 5f7679cc1dd2d29dab6ef4bf4b980aadf4f86ebb
- name: Disable n_hdlc kernel module
  hosts: "db.expertice.local"
  become: true

  tasks:
    # While this module may already be disabled in a different file,
    # create a blacklist file explicitly for this issue.
    - name: Blacklisting the n_hdlc module
      lineinfile:
        dest: /etc/modprobe.d/disable-n_hdlc.conf
        line: "install n_hdlc /bin/true"
        owner: root
        group: root
        mode: 0644
        state: present
        create: yes

    # Ensure that the module is not currently loaded
    - name: Checking loaded modules
      command: awk /^n_hdlc/ /proc/modules
      register: loaded_modules
      changed_when: false
      check_mode: no

    # If the module was found, a reboot is necessary
    - when: "{{ loaded_modules.stdout | default('') | search('n_hdlc') }}"
      name: set reboot fact
      set_fact:
        insights_needs_reboot: True


# CVE-2017-5461: NSS code execution
# Identifier: (advisor:CVE_2017_5461_nss|CVE_2017_5461_NSS_2,update_nss_reboot)
# Version: 14edeb40b80da4c1f1baa5d159f58f30c952592a
- name: Update nss packages and reboot
  hosts: "db.expertice.local"
  become: true
  vars:
    pydata: "{{insights_report.details['CVE_2017_5461_nss|CVE_2017_5461_NSS_2'] | default('')}}"
  tasks:

    - when: pydata != ''
      name: Update nss packages
      yum:
        name: "{{item}}"
        state: latest
      with_items: "{{pydata.PACKAGE_NAMES}}"
      register: yum

    - when: yum is changed
      set_fact:
        insights_needs_reboot: True


# CVE-2017-5753, CVE-2017-5754: &quot;Spectre&#x2F;Meltdown&quot; CPU side-channel
# Identifier: (advisor:CVE_2017_5753_4_cpu_kernel|KERNEL_CVE_2017_5753_4_CPU_ERROR_3,kernel_update)
# Version: e20ad6ba85563766bb4c5ce94bef2546241fab58
- name: Update system to the latest kernel and reboot
  hosts: "db.expertice.local"
  become: true
  vars:
    # determine if we need to update the 'kernel' package or 'kernel-rt' package
    kernel_pkg: "{{'kernel-rt' if 'rt' in ansible_kernel else 'kernel'}}"

  tasks:
    - name: Clear and update repos
      command: yum clean all
      register: yum_clear
      changed_when: '"Cleaning up everything" in yum_clear.stdout'

    - name: Update kernel
      yum:
        name: "{{ kernel_pkg }}"
        state: latest
      register: yum

    - when: yum is changed
      name: set reboot fact
      set_fact:
        insights_needs_reboot: True

    - when: not yum is changed
      # The latest kernel is already installed so boot from it.  Sort the installed kernels
      # by buildtime and select the one with the most recent build time
      block:
        - name: get latest installed {{ kernel_pkg }} package version
          command: rpm -q {{ kernel_pkg }} --queryformat="%{buildtime}\t%{version}-%{release}.%{arch}\n" | sort -nr | head -1 | cut -f2
          register: latest_kernel
          check_mode: no

        - name: get configured default kernel
          command: /sbin/grubby --default-kernel
          register: default_kernel
          check_mode: no

        - when: default_kernel.stdout.split('-', 1)[1] != latest_kernel.stdout
          name: set the default kernel to the latest installed
          command: /sbin/grubby --set-default /boot/vmlinuz-{{ latest_kernel.stdout }}
          register: grub_change
          check_mode: no

        - when: grub_change is changed
          name: set reboot fact
          set_fact:
            insights_needs_reboot: True


# CVE-2018-1111: NetworkManager code execution
# Identifier: (advisor:CVE_2018_1111_dhcp|WARN_CVE_2018_1111_DHCP_2,fix)
# Version: 1d9d901c3bf89c756299eb53f11f7d1154495734
- name: Fix WARN_CVE_2018_1111_DHCP_2 by updating dhclient
  hosts: "db.expertice.local"
  become: true

  tasks:
    - name: Update dhclient
      yum:
        name: dhclient
        state: latest


# CVE-2018-12126, CVE-2018-12127, CVE-2018-12130, CVE-2019-11091: &quot;MDS&quot; CPU side-channel
# Identifier: (advisor:CVE_2018_12130_cpu_kernel|CVE_2018_12130_CPU_KERNEL_NEED_UPDATE,update)
# Version: 729be48a38fabe5d895a422e3b47f74d85b01603
# Playbook for CVE_2018_12130_CPU_KERNEL_NEED_UPDATE
- name: Apply updates for CVE-2018-12130/12126/12127/2019-11091
  hosts: "db.expertice.local"
  become: true
  vars:
    pydata: "{{insights_report.details['CVE_2018_12130_cpu_kernel|CVE_2018_12130_CPU_KERNEL_NEED_UPDATE'] | default('')}}"
  tasks:
    - when: pydata != ''
      block:
        - name: Update kernel
          when: not pydata.rt
          yum:
            name: kernel
            state: latest

        - name: Update kernel (rt)
          when: pydata.rt
          yum:
            name: kernel-rt
            state: latest

        - name: Find latest installed kernel
          shell: yum list kernel | tail -1 | awk '{ print $2 }' warn=False
          register: latest_kernel

        - name: Get current default kernel
          command: grubby --default-kernel
          register: grubby_default

        - when: latest_kernel.stdout not in grubby_default.stdout
          command: grubby --set-default={{ grubby_default.stdout | regex_replace('\d\.\d+\.\d+.*el\d', latest_kernel.stdout)}}

        # pbtest reboot
        - name: Reboot
          set_fact:
            insights_needs_reboot: True


# CVE-2018-3620: &quot;L1TF&quot; CPU side-channel
# Identifier: (advisor:CVE_2018_3620_cpu_kernel|CVE_2018_3620_CPU_KERNEL_NEED_UPDATE,kernel_update)
# Version: e20ad6ba85563766bb4c5ce94bef2546241fab58
- name: Update system to the latest kernel and reboot
  hosts: "db.expertice.local"
  become: true
  vars:
    # determine if we need to update the 'kernel' package or 'kernel-rt' package
    kernel_pkg: "{{'kernel-rt' if 'rt' in ansible_kernel else 'kernel'}}"

  tasks:
    - name: Clear and update repos
      command: yum clean all
      register: yum_clear
      changed_when: '"Cleaning up everything" in yum_clear.stdout'

    - name: Update kernel
      yum:
        name: "{{ kernel_pkg }}"
        state: latest
      register: yum

    - when: yum is changed
      name: set reboot fact
      set_fact:
        insights_needs_reboot: True

    - when: not yum is changed
      # The latest kernel is already installed so boot from it.  Sort the installed kernels
      # by buildtime and select the one with the most recent build time
      block:
        - name: get latest installed {{ kernel_pkg }} package version
          command: rpm -q {{ kernel_pkg }} --queryformat="%{buildtime}\t%{version}-%{release}.%{arch}\n" | sort -nr | head -1 | cut -f2
          register: latest_kernel
          check_mode: no

        - name: get configured default kernel
          command: /sbin/grubby --default-kernel
          register: default_kernel
          check_mode: no

        - when: default_kernel.stdout.split('-', 1)[1] != latest_kernel.stdout
          name: set the default kernel to the latest installed
          command: /sbin/grubby --set-default /boot/vmlinuz-{{ latest_kernel.stdout }}
          register: grub_change
          check_mode: no

        - when: grub_change is changed
          name: set reboot fact
          set_fact:
            insights_needs_reboot: True


# CVE-2018-1087, CVE-2018-8897: &quot;POPSS&quot; kernel privilege escalation
# Identifier: (advisor:CVE_2018_8897_kernel_popss|KERNEL_CVE_2018_8897_VULNERABLE_2,kernel_update)
# Version: e20ad6ba85563766bb4c5ce94bef2546241fab58
- name: Update system to the latest kernel and reboot
  hosts: "db.expertice.local"
  become: true
  vars:
    # determine if we need to update the 'kernel' package or 'kernel-rt' package
    kernel_pkg: "{{'kernel-rt' if 'rt' in ansible_kernel else 'kernel'}}"

  tasks:
    - name: Clear and update repos
      command: yum clean all
      register: yum_clear
      changed_when: '"Cleaning up everything" in yum_clear.stdout'

    - name: Update kernel
      yum:
        name: "{{ kernel_pkg }}"
        state: latest
      register: yum

    - when: yum is changed
      name: set reboot fact
      set_fact:
        insights_needs_reboot: True

    - when: not yum is changed
      # The latest kernel is already installed so boot from it.  Sort the installed kernels
      # by buildtime and select the one with the most recent build time
      block:
        - name: get latest installed {{ kernel_pkg }} package version
          command: rpm -q {{ kernel_pkg }} --queryformat="%{buildtime}\t%{version}-%{release}.%{arch}\n" | sort -nr | head -1 | cut -f2
          register: latest_kernel
          check_mode: no

        - name: get configured default kernel
          command: /sbin/grubby --default-kernel
          register: default_kernel
          check_mode: no

        - when: default_kernel.stdout.split('-', 1)[1] != latest_kernel.stdout
          name: set the default kernel to the latest installed
          command: /sbin/grubby --set-default /boot/vmlinuz-{{ latest_kernel.stdout }}
          register: grub_change
          check_mode: no

        - when: grub_change is changed
          name: set reboot fact
          set_fact:
            insights_needs_reboot: True


# CVE-2019-11135: &quot;TAA&quot; kernel side-channel
# Identifier: (advisor:CVE_2019_11135_cpu_taa|CVE_2019_11135_CPU_TAA_KERNEL,update)
# Version: f274cacbb44d0ecad45232fcc0b66b58e26095d3
# Playbook for CVE_2019_11135_CPU_TAA_KERNEL
- name: Apply updates for CVE-2019-11135
  hosts: "db.expertice.local"
  become: true
  vars:
    pydata: "{{ insights_report.details['CVE_2019_11135_cpu_taa|CVE_2019_11135_CPU_TAA_KERNEL'] | default('') }}"
    # determine if we need to update the 'kernel' package or 'kernel-rt' package
    kernel_pkg: "{{ 'kernel-rt' if 'rt' in ansible_kernel else 'kernel' }}"
  tasks:
    - when: pydata != ''
      block:
        - name: Update kernel
          yum:
            name: "{{ kernel_pkg }}"
            state: latest

        - name: Update microcode
          yum:
            name: microcode_ctl
            state: latest

        - name: Find latest installed kernel
          shell: yum list {{ kernel_pkg }} | tail -1 | awk '{ print $2 }' warn=False
          register: latest_kernel

        - name: Get current default kernel
          command: grubby --default-kernel
          register: grubby_default

        - name: Set the latest installed kernel as the default kernel
          when: latest_kernel.stdout not in grubby_default.stdout
          command: grubby --set-default={{ grubby_default.stdout | regex_replace('\d\.\d+\.\d+.*el\d', latest_kernel.stdout) }}

        # pbtest reboot
        - name: Reboot
          set_fact:
            insights_needs_reboot: True


# CVE-2019-11477, CVE-2019-11478, CVE-2019-11479: &quot;Sack Panic&quot; kernel denial of service
# Identifier: (advisor:CVE_2019_11477_kernel|CVE_2019_11477_KERNEL,mitigate)
# Version: dda935285741df6956e5d7a3b97a8b5c0b8b3d9a
#
# TCP SACK PANIC Mitigation Playbook v1.0
#
# To completely address TCP SACK PANIC vulnerabilities, you will need to update your kernel.
# However, if you are unable to reboot your system into a new kernel immediately, disabling
# selective acknowledgments for the running system will reduce the system's attack surface
# for this issue.
#
# This playbook will disable selective acknowledgments system wide for all newly
# established TCP connections for the running system, create a file
# /etc/sysctl.d/99-tcpsack.conf to disable selective acknowledgmentsat boot time.
# The playbook will not reboot the system. A reboot is not necessary for mitigation.
#
# To verify the state of your system after rebooting, you can inspect the file
# located at /proc/sys/net/ipv4/tcp_sack, or you can run the detection script
# available on the "Diagnose" tab of the vulnerability article.
#
# To use this playbook, specify the host group or individual hostnames with the "HOSTS"
# extra var:
#
#   ansible-playbook -e HOSTS=web,mail,ldap04 disable_tcpsack_mitigate.yml
#
# See https://access.redhat.com/security/vulnerabilities/tcpsack for more information.
#
- name: Disable selective acknowledgments for the running system
  hosts: "db.expertice.local"
  become: true

  tasks:
    - name: Set net.ipv4.tpc_sack to 0
      sysctl:
        name: net.ipv4.tcp_sack
        value: '0'
        sysctl_set: yes
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/99-tcpsack.conf


# Decreased security: OpenSSH Ciphers and MACs settings
# Identifier: (advisor:hardening_ssh_hmac_cipher|OPENSSH_HARDENING_HMAC_CIPHER_2,fix)
# Version: 5f7679cc1dd2d29dab6ef4bf4b980aadf4f86ebb
- name: Update openssh-server package, replace Ciphers and MACs line in /etc/ssh/sshd_config and restart sshd service
  hosts: "db.expertice.local"
  become: true
  vars:
    pydata: "{{insights_report.details['hardening_ssh_hmac_cipher|OPENSSH_HARDENING_HMAC_CIPHER_2'] | default('')}}"

  tasks:
    - when:
        - pydata.fixable_by_updating is defined
        - pydata.fixable_by_updating
      name: Update openssh-server package
      yum:
        name: openssh-server
        state: latest

    - when:
        - pydata.ciphers_recomm is defined
        - pydata.ciphers_recomm
      name: Replace Ciphers line in etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: ^\s*Ciphers
        line: Ciphers {{",".join(pydata.ciphers_recomm)}}
        backup: yes

    - when:
        - pydata.macs_recomm is defined
        - pydata.macs_recomm
      name: Replace MACs line in etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: ^\s*MACs
        line: MACs {{",".join(pydata.macs_recomm)}}
        backup: yes

    - name: Restart sshd service
      service:
        name: sshd
        state: restarted


# System hang, high CPU usage, or application crash during a leap second event with chonyd
# Identifier: (advisor:leapsec_hrtimer_expire|LEAPSEC_HRTIMER_EXPIRE_EARLY_CHRONY_WARN,kernel_update)
# Version: e20ad6ba85563766bb4c5ce94bef2546241fab58
- name: Update system to the latest kernel and reboot
  hosts: "db.expertice.local"
  become: true
  vars:
    # determine if we need to update the 'kernel' package or 'kernel-rt' package
    kernel_pkg: "{{'kernel-rt' if 'rt' in ansible_kernel else 'kernel'}}"

  tasks:
    - name: Clear and update repos
      command: yum clean all
      register: yum_clear
      changed_when: '"Cleaning up everything" in yum_clear.stdout'

    - name: Update kernel
      yum:
        name: "{{ kernel_pkg }}"
        state: latest
      register: yum

    - when: yum is changed
      name: set reboot fact
      set_fact:
        insights_needs_reboot: True

    - when: not yum is changed
      # The latest kernel is already installed so boot from it.  Sort the installed kernels
      # by buildtime and select the one with the most recent build time
      block:
        - name: get latest installed {{ kernel_pkg }} package version
          command: rpm -q {{ kernel_pkg }} --queryformat="%{buildtime}\t%{version}-%{release}.%{arch}\n" | sort -nr | head -1 | cut -f2
          register: latest_kernel
          check_mode: no

        - name: get configured default kernel
          command: /sbin/grubby --default-kernel
          register: default_kernel
          check_mode: no

        - when: default_kernel.stdout.split('-', 1)[1] != latest_kernel.stdout
          name: set the default kernel to the latest installed
          command: /sbin/grubby --set-default /boot/vmlinuz-{{ latest_kernel.stdout }}
          register: grub_change
          check_mode: no

        - when: grub_change is changed
          name: set reboot fact
          set_fact:
            insights_needs_reboot: True


# Network connectivity loss will occur when an interface on Microsoft Hyper-V guest or Microsoft Azure instance uses the hv_netvsc driver
# Identifier: (advisor:network_hv_netvsc_driver_vmbus_fail|NETWORK_HV_NETVSC_DRIVER_VMBUS_WARN,kernel_update)
# Version: e20ad6ba85563766bb4c5ce94bef2546241fab58
- name: Update system to the latest kernel and reboot
  hosts: "db.expertice.local"
  become: true
  vars:
    # determine if we need to update the 'kernel' package or 'kernel-rt' package
    kernel_pkg: "{{'kernel-rt' if 'rt' in ansible_kernel else 'kernel'}}"

  tasks:
    - name: Clear and update repos
      command: yum clean all
      register: yum_clear
      changed_when: '"Cleaning up everything" in yum_clear.stdout'

    - name: Update kernel
      yum:
        name: "{{ kernel_pkg }}"
        state: latest
      register: yum

    - when: yum is changed
      name: set reboot fact
      set_fact:
        insights_needs_reboot: True

    - when: not yum is changed
      # The latest kernel is already installed so boot from it.  Sort the installed kernels
      # by buildtime and select the one with the most recent build time
      block:
        - name: get latest installed {{ kernel_pkg }} package version
          command: rpm -q {{ kernel_pkg }} --queryformat="%{buildtime}\t%{version}-%{release}.%{arch}\n" | sort -nr | head -1 | cut -f2
          register: latest_kernel
          check_mode: no

        - name: get configured default kernel
          command: /sbin/grubby --default-kernel
          register: default_kernel
          check_mode: no

        - when: default_kernel.stdout.split('-', 1)[1] != latest_kernel.stdout
          name: set the default kernel to the latest installed
          command: /sbin/grubby --set-default /boot/vmlinuz-{{ latest_kernel.stdout }}
          register: grub_change
          check_mode: no

        - when: grub_change is changed
          name: set reboot fact
          set_fact:
            insights_needs_reboot: True


# Automatic system reboot was suppressed for this playbook.
# This play lists the systems that need to be rebooted manually for the changes to take effect.
- name: Reboot reminder
  hosts: "db.expertice.local"
  gather_facts: False
  tasks:
    - debug:
        msg: "Automatic system reboot was suppressed for this playbook. Reboot {{inventory_hostname}} manually for the changes to take effect."
      when:
        - insights_needs_reboot is defined
        - insights_needs_reboot

- name: run insights
  hosts: "db.expertice.local"
  become: True
  gather_facts: False
  tasks:
    - name: run insights
      command: insights-client
      changed_when: false
